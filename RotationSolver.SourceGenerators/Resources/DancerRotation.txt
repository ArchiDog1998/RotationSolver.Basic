// <auto-generated/>
#pragma warning disable
#nullable enable
namespace RotationSolver.Basic.Rotations.Basic;
/// <summary>
/// <see href="https://na.finalfantasyxiv.com/jobguide/dancer"><strong>Dancer</strong></see>
/// <br>Number of Actions: 59</br>
/// <br>Number of Replace Actions: 11</br>
/// <br>Number of Action Combos: 4</br>
/// <br>Number of Traits: 17</br>
/// </summary>
[global::RotationSolver.Basic.Attributes.Jobs(global::ECommons.ExcelServices.Job.DNC)]
public abstract partial class DancerRotation : global::RotationSolver.Basic.Rotations.CustomRotation
{
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CascadePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CascadePvE, false);
        var setting = action.Setting;
        ModifyCascadePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CascadePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCascadePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CascadePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CascadePvE => _CascadePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FountainPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FountainPvE, false);
        var setting = action.Setting;
        ModifyFountainPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FountainPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFountainPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FountainPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FountainPvE => _FountainPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ReverseCascadePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ReverseCascadePvE, false);
        var setting = action.Setting;
        ModifyReverseCascadePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ReverseCascadePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyReverseCascadePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ReverseCascadePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ReverseCascadePvE => _ReverseCascadePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FountainfallPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FountainfallPvE, false);
        var setting = action.Setting;
        ModifyFountainfallPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FountainfallPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFountainfallPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FountainfallPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FountainfallPvE => _FountainfallPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WindmillPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WindmillPvE, false);
        var setting = action.Setting;
        ModifyWindmillPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WindmillPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWindmillPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WindmillPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WindmillPvE => _WindmillPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BladeshowerPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.BladeshowerPvE, false);
        var setting = action.Setting;
        ModifyBladeshowerPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BladeshowerPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBladeshowerPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BladeshowerPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction BladeshowerPvE => _BladeshowerPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _RisingWindmillPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.RisingWindmillPvE, false);
        var setting = action.Setting;
        ModifyRisingWindmillPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="RisingWindmillPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyRisingWindmillPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.RisingWindmillPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction RisingWindmillPvE => _RisingWindmillPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BloodshowerPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.BloodshowerPvE, false);
        var setting = action.Setting;
        ModifyBloodshowerPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BloodshowerPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBloodshowerPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BloodshowerPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction BloodshowerPvE => _BloodshowerPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StandardStepPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StandardStepPvE, false);
        var setting = action.Setting;
        ModifyStandardStepPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StandardStepPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStandardStepPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StandardStepPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StandardStepPvE => _StandardStepPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TechnicalStepPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TechnicalStepPvE, false);
        var setting = action.Setting;
        ModifyTechnicalStepPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TechnicalStepPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTechnicalStepPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TechnicalStepPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TechnicalStepPvE => _TechnicalStepPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EmboitePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.EmboitePvE, false);
        var setting = action.Setting;
        ModifyEmboitePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EmboitePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyEmboitePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EmboitePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction EmboitePvE => _EmboitePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EntrechatPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.EntrechatPvE, false);
        var setting = action.Setting;
        ModifyEntrechatPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EntrechatPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyEntrechatPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EntrechatPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction EntrechatPvE => _EntrechatPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _JetePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.JetePvE, false);
        var setting = action.Setting;
        ModifyJetePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="JetePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyJetePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.JetePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction JetePvE => _JetePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PirouettePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.PirouettePvE, false);
        var setting = action.Setting;
        ModifyPirouettePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PirouettePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPirouettePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PirouettePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PirouettePvE => _PirouettePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StandardFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StandardFinishPvE, false);
        var setting = action.Setting;
        ModifyStandardFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StandardFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStandardFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StandardFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StandardFinishPvE => _StandardFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TechnicalFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TechnicalFinishPvE, false);
        var setting = action.Setting;
        ModifyTechnicalFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TechnicalFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTechnicalFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TechnicalFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TechnicalFinishPvE => _TechnicalFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SaberDancePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SaberDancePvE, false);
        var setting = action.Setting;
        ModifySaberDancePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SaberDancePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySaberDancePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SaberDancePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SaberDancePvE => _SaberDancePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ClosedPositionPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ClosedPositionPvE, false);
        var setting = action.Setting;
        ModifyClosedPositionPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ClosedPositionPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyClosedPositionPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ClosedPositionPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ClosedPositionPvE => _ClosedPositionPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FanDancePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FanDancePvE, false);
        var setting = action.Setting;
        ModifyFanDancePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FanDancePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFanDancePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FanDancePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FanDancePvE => _FanDancePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FanDanceIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FanDanceIiPvE, false);
        var setting = action.Setting;
        ModifyFanDanceIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FanDanceIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFanDanceIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FanDanceIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FanDanceIiPvE => _FanDanceIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FanDanceIiiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FanDanceIiiPvE, false);
        var setting = action.Setting;
        ModifyFanDanceIiiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FanDanceIiiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFanDanceIiiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FanDanceIiiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FanDanceIiiPvE => _FanDanceIiiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EnAvantPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.EnAvantPvE, false);
        var setting = action.Setting;
        ModifyEnAvantPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EnAvantPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyEnAvantPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EnAvantPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction EnAvantPvE => _EnAvantPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DevilmentPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.DevilmentPvE, false);
        var setting = action.Setting;
        ModifyDevilmentPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DevilmentPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyDevilmentPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DevilmentPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction DevilmentPvE => _DevilmentPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ShieldSambaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ShieldSambaPvE, false);
        var setting = action.Setting;
        ModifyShieldSambaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ShieldSambaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyShieldSambaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ShieldSambaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ShieldSambaPvE => _ShieldSambaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FlourishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FlourishPvE, false);
        var setting = action.Setting;
        ModifyFlourishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FlourishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFlourishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FlourishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FlourishPvE => _FlourishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ImprovisationPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ImprovisationPvE, false);
        var setting = action.Setting;
        ModifyImprovisationPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ImprovisationPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyImprovisationPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ImprovisationPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ImprovisationPvE => _ImprovisationPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CuringWaltzPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CuringWaltzPvE, false);
        var setting = action.Setting;
        ModifyCuringWaltzPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CuringWaltzPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCuringWaltzPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CuringWaltzPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CuringWaltzPvE => _CuringWaltzPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SingleStandardFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SingleStandardFinishPvE, false);
        var setting = action.Setting;
        ModifySingleStandardFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SingleStandardFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySingleStandardFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SingleStandardFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SingleStandardFinishPvE => _SingleStandardFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DoubleStandardFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.DoubleStandardFinishPvE, false);
        var setting = action.Setting;
        ModifyDoubleStandardFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DoubleStandardFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyDoubleStandardFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DoubleStandardFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction DoubleStandardFinishPvE => _DoubleStandardFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SingleTechnicalFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SingleTechnicalFinishPvE, false);
        var setting = action.Setting;
        ModifySingleTechnicalFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SingleTechnicalFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySingleTechnicalFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SingleTechnicalFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SingleTechnicalFinishPvE => _SingleTechnicalFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DoubleTechnicalFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.DoubleTechnicalFinishPvE, false);
        var setting = action.Setting;
        ModifyDoubleTechnicalFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DoubleTechnicalFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyDoubleTechnicalFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DoubleTechnicalFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction DoubleTechnicalFinishPvE => _DoubleTechnicalFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TripleTechnicalFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TripleTechnicalFinishPvE, false);
        var setting = action.Setting;
        ModifyTripleTechnicalFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TripleTechnicalFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTripleTechnicalFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TripleTechnicalFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TripleTechnicalFinishPvE => _TripleTechnicalFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _QuadrupleTechnicalFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.QuadrupleTechnicalFinishPvE, false);
        var setting = action.Setting;
        ModifyQuadrupleTechnicalFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="QuadrupleTechnicalFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyQuadrupleTechnicalFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.QuadrupleTechnicalFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction QuadrupleTechnicalFinishPvE => _QuadrupleTechnicalFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EndingPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.EndingPvE, false);
        var setting = action.Setting;
        ModifyEndingPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EndingPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyEndingPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EndingPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction EndingPvE => _EndingPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ImprovisedFinishPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ImprovisedFinishPvE, false);
        var setting = action.Setting;
        ModifyImprovisedFinishPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ImprovisedFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyImprovisedFinishPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ImprovisedFinishPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ImprovisedFinishPvE => _ImprovisedFinishPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TillanaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TillanaPvE, false);
        var setting = action.Setting;
        ModifyTillanaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TillanaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTillanaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TillanaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TillanaPvE => _TillanaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FanDanceIvPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FanDanceIvPvE, false);
        var setting = action.Setting;
        ModifyFanDanceIvPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FanDanceIvPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFanDanceIvPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FanDanceIvPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FanDanceIvPvE => _FanDanceIvPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StarfallDancePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StarfallDancePvE, false);
        var setting = action.Setting;
        ModifyStarfallDancePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StarfallDancePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStarfallDancePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StarfallDancePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StarfallDancePvE => _StarfallDancePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CascadePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CascadePvP, false);
        var setting = action.Setting;
        ModifyCascadePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CascadePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCascadePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CascadePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CascadePvP => _CascadePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FountainPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FountainPvP, false);
        var setting = action.Setting;
        ModifyFountainPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FountainPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFountainPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FountainPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FountainPvP => _FountainPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ReverseCascadePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ReverseCascadePvP, false);
        var setting = action.Setting;
        ModifyReverseCascadePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ReverseCascadePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyReverseCascadePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ReverseCascadePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ReverseCascadePvP => _ReverseCascadePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FountainfallPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FountainfallPvP, false);
        var setting = action.Setting;
        ModifyFountainfallPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FountainfallPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFountainfallPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FountainfallPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FountainfallPvP => _FountainfallPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SaberDancePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SaberDancePvP, false);
        var setting = action.Setting;
        ModifySaberDancePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SaberDancePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySaberDancePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SaberDancePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SaberDancePvP => _SaberDancePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StarfallDancePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StarfallDancePvP, false);
        var setting = action.Setting;
        ModifyStarfallDancePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StarfallDancePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStarfallDancePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StarfallDancePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StarfallDancePvP => _StarfallDancePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HoningDancePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HoningDancePvP, false);
        var setting = action.Setting;
        ModifyHoningDancePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HoningDancePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHoningDancePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HoningDancePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HoningDancePvP => _HoningDancePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HoningOvationPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP, false);
        var setting = action.Setting;
        ModifyHoningOvationPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HoningOvationPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHoningOvationPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HoningOvationPvP => _HoningOvationPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HoningOvationPvP_29424Creator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29424, false);
        var setting = action.Setting;
        ModifyHoningOvationPvP_29424(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HoningOvationPvP_29424"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHoningOvationPvP_29424(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29424"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HoningOvationPvP_29424 => _HoningOvationPvP_29424Creator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HoningOvationPvP_29425Creator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29425, false);
        var setting = action.Setting;
        ModifyHoningOvationPvP_29425(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HoningOvationPvP_29425"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHoningOvationPvP_29425(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29425"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HoningOvationPvP_29425 => _HoningOvationPvP_29425Creator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HoningOvationPvP_29426Creator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29426, false);
        var setting = action.Setting;
        ModifyHoningOvationPvP_29426(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HoningOvationPvP_29426"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHoningOvationPvP_29426(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29426"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HoningOvationPvP_29426 => _HoningOvationPvP_29426Creator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HoningOvationPvP_29427Creator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29427, false);
        var setting = action.Setting;
        ModifyHoningOvationPvP_29427(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HoningOvationPvP_29427"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHoningOvationPvP_29427(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29427"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HoningOvationPvP_29427 => _HoningOvationPvP_29427Creator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FanDancePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FanDancePvP, false);
        var setting = action.Setting;
        ModifyFanDancePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FanDancePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFanDancePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FanDancePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FanDancePvP => _FanDancePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CuringWaltzPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CuringWaltzPvP, false);
        var setting = action.Setting;
        ModifyCuringWaltzPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CuringWaltzPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCuringWaltzPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CuringWaltzPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CuringWaltzPvP => _CuringWaltzPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EnAvantPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.EnAvantPvP, false);
        var setting = action.Setting;
        ModifyEnAvantPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EnAvantPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyEnAvantPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EnAvantPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction EnAvantPvP => _EnAvantPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ClosedPositionPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ClosedPositionPvP, false);
        var setting = action.Setting;
        ModifyClosedPositionPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ClosedPositionPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyClosedPositionPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ClosedPositionPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ClosedPositionPvP => _ClosedPositionPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ContradancePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ContradancePvP, false);
        var setting = action.Setting;
        ModifyContradancePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ContradancePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyContradancePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ContradancePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ContradancePvP => _ContradancePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HoningOvationPvP_29470Creator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29470, false);
        var setting = action.Setting;
        ModifyHoningOvationPvP_29470(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HoningOvationPvP_29470"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHoningOvationPvP_29470(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HoningOvationPvP_29470"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HoningOvationPvP_29470 => _HoningOvationPvP_29470Creator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _LastDancePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.LastDancePvE, false);
        var setting = action.Setting;
        ModifyLastDancePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="LastDancePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyLastDancePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.LastDancePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction LastDancePvE => _LastDancePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FinishingMovePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FinishingMovePvE, false);
        var setting = action.Setting;
        ModifyFinishingMovePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FinishingMovePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFinishingMovePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FinishingMovePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FinishingMovePvE => _FinishingMovePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DanceOfTheDawnPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.DanceOfTheDawnPvE, false);
        var setting = action.Setting;
        ModifyDanceOfTheDawnPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DanceOfTheDawnPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyDanceOfTheDawnPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DanceOfTheDawnPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction DanceOfTheDawnPvE => _DanceOfTheDawnPvECreator.Value;
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50251"><strong>Increased Action Damage</strong></see> (DNC) [251]
/// <para>Increases base action damage by 10%.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait IncreasedActionDamageTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(251U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50252"><strong>Fourfold Fantasy</strong></see> (DNC) [252]
/// <para>Grants a Fourfold Feather upon landing certain actions.</para>
/// <para>Maximum Stacks: 4</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait FourfoldFantasyTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(252U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50253"><strong>Increased Action Damage II</strong></see> (DNC) [253]
/// <para>Increases base action damage by 20%.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait IncreasedActionDamageIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(253U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50254"><strong>Enhanced En Avant</strong></see> (DNC) [254]
/// <para>Allows the accumulation of charges for consecutive uses of En Avant.</para>
/// <para>Maximum Charges: 2</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedEnAvantTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(254U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50255"><strong>Esprit</strong></see> (DNC) [255]
/// <para>Grants Esprit to self and nearby party members upon successfully executing Standard Finish or Technical Finish.</para>
/// <para>Esprit Effect: Increases Esprit Gauge by 5 upon successfully landing Cascade, Reverse Cascade, Fountain, Fountainfall, Windmill, Rising Windmill, Bladeshower, or Bloodshower. When party members successfully land a weaponskill or cast a spell, has a chance of increasing Esprit Gauge by 10.</para>
/// <para>Chance of triggering party member effect differs according to job.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EspritTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(255U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50256"><strong>Enhanced En Avant II</strong></see> (DNC) [256]
/// <para>Allows a third charge of En Avant.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedEnAvantIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(256U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50453"><strong>Enhanced Technical Finish</strong></see> (DNC) [453]
/// <para>Grants Flourishing Finish after executing Technical Finish.</para>
/// <para>Duration: 30s</para>
/// <para>Technical Finish becomes Tillana while under this effect.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedTechnicalFinishTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(453U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50454"><strong>Enhanced Esprit</strong></see> (DNC) [454]
/// <para>Increases Esprit Gauge by 10 upon successfully landing Reverse Cascade, Fountainfall, Rising Windmill, or Bloodshower.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedEspritTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(454U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50455"><strong>Enhanced Flourish</strong></see> (DNC) [455]
/// <para>Grants Fourfold Fan Dance upon executing Flourish.</para>
/// <para>Duration: 30s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedFlourishTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(455U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50456"><strong>Enhanced Shield Samba</strong></see> (DNC) [456]
/// <para>Reduces Shield Samba recast time to 90 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedShieldSambaTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(456U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50457"><strong>Enhanced Devilment</strong></see> (DNC) [457]
/// <para>Grants Flourishing Starfall upon executing Devilment.</para>
/// <para>Duration: 20s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedDevilmentTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(457U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50609"><strong>Enhanced Standard Finish</strong></see> (DNC) [609]
/// <para>Grants Last Dance Ready upon executing Standard Finish.</para>
/// <para>Duration: 30s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedStandardFinishTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(609U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50610"><strong>Enhanced Flourish II</strong></see> (DNC) [610]
/// <para>Grants Finishing Move Ready upon executing Flourish.</para>
/// <para>Duration: 30s</para>
/// <para>Standard Step changes to Finishing Move while under the effect of Finishing Move Ready.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedFlourishIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(610U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50611"><strong>Enhanced Shield Samba II</strong></see> (DNC) [611]
/// <para>Improves Shield Samba's damage reduction effect to 15%.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedShieldSambaIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(611U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50612"><strong>Enhanced Technical Finish II</strong></see> (DNC) [612]
/// <para>Grants Dance of the Dawn Ready upon executing Technical Finish.</para>
/// <para>Duration: 30s</para>
/// <para>Saber Dance changes to Dance of the Dawn while under the effect of Dance of the Dawn Ready and the Esprit Gauge is 50 or higher.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedTechnicalFinishIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(612U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50642"><strong>Enhanced Second Wind</strong></see> (PGL LNC ARC ROG MNK DRG BRD NIN MCH SAM DNC RPR VPR) [642]
/// <para>Increases the healing potency of Second Wind to 800.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedSecondWindTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(642U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50662"><strong>Dynamic Dancer</strong></see> (DNC) [662]
/// <para>Increases the potency of Cascade to 220, Fountain to 120, Reverse Cascade to 280, Fountainfall to 340, Double Standard Finish to 850, Quadruple Technical Finish to 1,300, Saber Dance to 520, and Fan Dance IV to 420.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait DynamicDancerTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(662U);

    /// <summary>
/// <seealso cref="CascadePvE"/> -> <seealso cref="EmboitePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet CascadePvEReplace { get; }

    /// <summary>
/// <seealso cref="FountainPvE"/> -> <seealso cref="EntrechatPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet FountainPvEReplace { get; }

    /// <summary>
/// <seealso cref="ReverseCascadePvE"/> -> <seealso cref="JetePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet ReverseCascadePvEReplace { get; }

    /// <summary>
/// <seealso cref="FountainfallPvE"/> -> <seealso cref="PirouettePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet FountainfallPvEReplace { get; }

    /// <summary>
/// <seealso cref="WindmillPvE"/> -> <seealso cref="EmboitePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet WindmillPvEReplace { get; }

    /// <summary>
/// <seealso cref="BladeshowerPvE"/> -> <seealso cref="EntrechatPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet BladeshowerPvEReplace { get; }

    /// <summary>
/// <seealso cref="RisingWindmillPvE"/> -> <seealso cref="JetePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet RisingWindmillPvEReplace { get; }

    /// <summary>
/// <seealso cref="BloodshowerPvE"/> -> <seealso cref="PirouettePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet BloodshowerPvEReplace { get; }

    /// <summary>
/// <seealso cref="ClosedPositionPvE"/> -> <seealso cref="EndingPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet ClosedPositionPvEReplace { get; }

    /// <summary>
/// <seealso cref="ImprovisationPvE"/> -> <seealso cref="ImprovisedFinishPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet ImprovisationPvEReplace { get; }

    /// <summary>
/// <seealso cref="SaberDancePvE"/> -> <seealso cref="DanceOfTheDawnPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet SaberDancePvEReplace { get; }

    /// <summary>
/// <seealso cref="CascadePvE"/> -> <seealso cref="FountainPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet FountainPvECombo { get; }

    /// <summary>
/// <seealso cref="WindmillPvE"/> -> <seealso cref="BladeshowerPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet BladeshowerPvECombo { get; }

    /// <summary>
/// <seealso cref="CascadePvP"/> -> <seealso cref="FountainPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet FountainPvPCombo { get; }

    /// <summary>
/// <seealso cref="CascadePvP"/> -> <seealso cref="FountainfallPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet FountainfallPvPCombo { get; }

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    private global::RotationSolver.Basic.Traits.IBaseTrait[]? _AllTraits = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Traits.IBaseTrait[] AllTraits => _AllTraits ??= [IncreasedActionDamageTrait, FourfoldFantasyTrait, IncreasedActionDamageIiTrait, EnhancedEnAvantTrait, EspritTrait, EnhancedEnAvantIiTrait, EnhancedTechnicalFinishTrait, EnhancedEspritTrait, EnhancedFlourishTrait, EnhancedShieldSambaTrait, EnhancedDevilmentTrait, EnhancedStandardFinishTrait, EnhancedFlourishIiTrait, EnhancedShieldSambaIiTrait, EnhancedTechnicalFinishIiTrait, EnhancedSecondWindTrait, DynamicDancerTrait, ..base.AllTraits];

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    static global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge JobGauge => global::ECommons.DalamudServices.Svc.Gauges.Get<global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge>();

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge.Feathers"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte Feathers => JobGauge.Feathers;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge.Esprit"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte Esprit => JobGauge.Esprit;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge.CompletedSteps"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte CompletedSteps => JobGauge.CompletedSteps;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge.Steps"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.UInt32[] Steps => JobGauge.Steps;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge.NextStep"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.UInt32 NextStep => JobGauge.NextStep;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.DNCGauge.IsDancing"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Boolean IsDancing => JobGauge.IsDancing;

    public override /// <inheritdoc/>
    void DisplayStatus()
    {
        ImGui.Text("Feathers: " + Feathers.ToString());
        ImGui.Text("Esprit: " + Esprit.ToString());
        ImGui.Text("CompletedSteps: " + CompletedSteps.ToString());
        ImGui.Text("Steps: " + string.Join(", ", Steps.Select(i => i.ToString())));
        ImGui.Text("NextStep: " + NextStep.ToString());
        ImGui.Text("IsDancing: " + IsDancing.ToString());
        base.DisplayStatus();
    }

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BigShotPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.BigShotPvE, false);
        var setting = action.Setting;
        ModifyBigShotPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BigShotPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBigShotPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BigShotPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction BigShotPvE => _BigShotPvECreator.Value;

    /// <inheritdoc cref="BigShotPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak1 => BigShotPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DesperadoPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.DesperadoPvE, false);
        var setting = action.Setting;
        ModifyDesperadoPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DesperadoPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyDesperadoPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DesperadoPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction DesperadoPvE => _DesperadoPvECreator.Value;

    /// <inheritdoc cref="DesperadoPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak2 => DesperadoPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CrimsonLotusPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CrimsonLotusPvE, false);
        var setting = action.Setting;
        ModifyCrimsonLotusPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CrimsonLotusPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCrimsonLotusPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CrimsonLotusPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction CrimsonLotusPvE => _CrimsonLotusPvECreator.Value;

    /// <inheritdoc cref="CrimsonLotusPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak3 => CrimsonLotusPvE;

    /// <inheritdoc/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    protected DancerRotation()
    {
        CascadePvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [EmboitePvE, CascadePvE]);
        FountainPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [EntrechatPvE, FountainPvE]);
        ReverseCascadePvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [JetePvE, ReverseCascadePvE]);
        FountainfallPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [PirouettePvE, FountainfallPvE]);
        WindmillPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [EmboitePvE, WindmillPvE]);
        BladeshowerPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [EntrechatPvE, BladeshowerPvE]);
        RisingWindmillPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [JetePvE, RisingWindmillPvE]);
        BloodshowerPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [PirouettePvE, BloodshowerPvE]);
        ClosedPositionPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [EndingPvE, ClosedPositionPvE]);
        ImprovisationPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [ImprovisedFinishPvE, ImprovisationPvE]);
        SaberDancePvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [DanceOfTheDawnPvE, SaberDancePvE]);
        FountainPvECombo = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [FountainPvEReplace, CascadePvEReplace]);
        BladeshowerPvECombo = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [BladeshowerPvEReplace, WindmillPvEReplace]);
        FountainPvPCombo = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [FountainPvP, CascadePvP]);
        FountainfallPvPCombo = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [FountainfallPvP, CascadePvP]);
    }

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction[]? _AllBaseActions = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Actions.IBaseAction[] AllBaseActions => _AllBaseActions ??= [CascadePvE, FountainPvE, ReverseCascadePvE, FountainfallPvE, WindmillPvE, BladeshowerPvE, RisingWindmillPvE, BloodshowerPvE, StandardStepPvE, TechnicalStepPvE, EmboitePvE, EntrechatPvE, JetePvE, PirouettePvE, StandardFinishPvE, TechnicalFinishPvE, SaberDancePvE, ClosedPositionPvE, FanDancePvE, FanDanceIiPvE, FanDanceIiiPvE, EnAvantPvE, DevilmentPvE, ShieldSambaPvE, FlourishPvE, ImprovisationPvE, CuringWaltzPvE, SingleStandardFinishPvE, DoubleStandardFinishPvE, SingleTechnicalFinishPvE, DoubleTechnicalFinishPvE, TripleTechnicalFinishPvE, QuadrupleTechnicalFinishPvE, EndingPvE, ImprovisedFinishPvE, TillanaPvE, FanDanceIvPvE, StarfallDancePvE, CascadePvP, FountainPvP, ReverseCascadePvP, FountainfallPvP, SaberDancePvP, StarfallDancePvP, HoningDancePvP, HoningOvationPvP, FanDancePvP, CuringWaltzPvP, EnAvantPvP, ClosedPositionPvP, ContradancePvP, LastDancePvE, FinishingMovePvE, DanceOfTheDawnPvE, LimitBreak1, LimitBreak2, LimitBreak3, ..base.AllBaseActions];
}