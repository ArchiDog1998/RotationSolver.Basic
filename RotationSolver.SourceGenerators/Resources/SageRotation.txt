// <auto-generated/>
#pragma warning disable
#nullable enable
namespace RotationSolver.Basic.Rotations.Basic;
[global::RotationSolver.Basic.Attributes.Jobs(global::ECommons.ExcelServices.Job.SGE)]
/// <summary>
/// <see href="https://na.finalfantasyxiv.com/jobguide/sage"><strong>Sage</strong></see>
/// <br>Number of Actions: 51</br>
/// <br>Number of Traits: 17</br>
/// </summary>
public abstract partial class SageRotation : global::RotationSolver.Basic.Rotations.CustomRotation
{
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DosisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24283, false);
        var setting = action.Setting;
        ModifyDosisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DosisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDosisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DosisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DosisPvE => _DosisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DiagnosisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24284, false);
        var setting = action.Setting;
        ModifyDiagnosisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DiagnosisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDiagnosisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DiagnosisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DiagnosisPvE => _DiagnosisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _KardiaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24285, false);
        var setting = action.Setting;
        ModifyKardiaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="KardiaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyKardiaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.KardiaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction KardiaPvE => _KardiaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PrognosisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24286, false);
        var setting = action.Setting;
        ModifyPrognosisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PrognosisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPrognosisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PrognosisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PrognosisPvE => _PrognosisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EgeiroPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24287, false);
        var setting = action.Setting;
        ModifyEgeiroPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EgeiroPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEgeiroPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EgeiroPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EgeiroPvE => _EgeiroPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PhysisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24288, false);
        var setting = action.Setting;
        ModifyPhysisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PhysisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPhysisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PhysisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PhysisPvE => _PhysisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PhlegmaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24289, false);
        var setting = action.Setting;
        ModifyPhlegmaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PhlegmaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPhlegmaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PhlegmaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PhlegmaPvE => _PhlegmaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasiaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24290, false);
        var setting = action.Setting;
        ModifyEukrasiaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasiaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasiaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasiaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasiaPvE => _EukrasiaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianDiagnosisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24291, false);
        var setting = action.Setting;
        ModifyEukrasianDiagnosisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianDiagnosisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianDiagnosisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianDiagnosisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianDiagnosisPvE => _EukrasianDiagnosisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianPrognosisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24292, false);
        var setting = action.Setting;
        ModifyEukrasianPrognosisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianPrognosisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianPrognosisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianPrognosisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianPrognosisPvE => _EukrasianPrognosisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianDosisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24293, false);
        var setting = action.Setting;
        ModifyEukrasianDosisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianDosisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianDosisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianDosisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianDosisPvE => _EukrasianDosisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SoteriaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24294, false);
        var setting = action.Setting;
        ModifySoteriaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SoteriaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifySoteriaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SoteriaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction SoteriaPvE => _SoteriaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _IcarusPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24295, false);
        var setting = action.Setting;
        ModifyIcarusPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="IcarusPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyIcarusPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.IcarusPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction IcarusPvE => _IcarusPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DruocholePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24296, false);
        var setting = action.Setting;
        ModifyDruocholePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DruocholePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDruocholePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DruocholePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DruocholePvE => _DruocholePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DyskrasiaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24297, false);
        var setting = action.Setting;
        ModifyDyskrasiaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DyskrasiaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDyskrasiaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DyskrasiaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DyskrasiaPvE => _DyskrasiaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _KeracholePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24298, false);
        var setting = action.Setting;
        ModifyKeracholePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="KeracholePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyKeracholePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.KeracholePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction KeracholePvE => _KeracholePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _IxocholePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24299, false);
        var setting = action.Setting;
        ModifyIxocholePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="IxocholePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyIxocholePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.IxocholePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction IxocholePvE => _IxocholePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ZoePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24300, false);
        var setting = action.Setting;
        ModifyZoePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ZoePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyZoePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ZoePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction ZoePvE => _ZoePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PepsisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24301, false);
        var setting = action.Setting;
        ModifyPepsisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PepsisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPepsisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PepsisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PepsisPvE => _PepsisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PhysisIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24302, false);
        var setting = action.Setting;
        ModifyPhysisIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PhysisIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPhysisIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PhysisIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PhysisIiPvE => _PhysisIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TaurocholePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24303, false);
        var setting = action.Setting;
        ModifyTaurocholePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TaurocholePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyTaurocholePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TaurocholePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction TaurocholePvE => _TaurocholePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ToxikonPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24304, false);
        var setting = action.Setting;
        ModifyToxikonPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ToxikonPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyToxikonPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ToxikonPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction ToxikonPvE => _ToxikonPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HaimaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24305, false);
        var setting = action.Setting;
        ModifyHaimaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HaimaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyHaimaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HaimaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction HaimaPvE => _HaimaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DosisIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24306, false);
        var setting = action.Setting;
        ModifyDosisIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DosisIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDosisIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DosisIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DosisIiPvE => _DosisIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PhlegmaIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24307, false);
        var setting = action.Setting;
        ModifyPhlegmaIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PhlegmaIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPhlegmaIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PhlegmaIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PhlegmaIiPvE => _PhlegmaIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianDosisIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24308, false);
        var setting = action.Setting;
        ModifyEukrasianDosisIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianDosisIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianDosisIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianDosisIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianDosisIiPvE => _EukrasianDosisIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _RhizomataPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24309, false);
        var setting = action.Setting;
        ModifyRhizomataPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="RhizomataPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyRhizomataPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.RhizomataPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction RhizomataPvE => _RhizomataPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HolosPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24310, false);
        var setting = action.Setting;
        ModifyHolosPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HolosPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyHolosPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HolosPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction HolosPvE => _HolosPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PanhaimaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24311, false);
        var setting = action.Setting;
        ModifyPanhaimaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PanhaimaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPanhaimaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PanhaimaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PanhaimaPvE => _PanhaimaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DosisIiiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24312, false);
        var setting = action.Setting;
        ModifyDosisIiiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DosisIiiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDosisIiiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DosisIiiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DosisIiiPvE => _DosisIiiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PhlegmaIiiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24313, false);
        var setting = action.Setting;
        ModifyPhlegmaIiiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PhlegmaIiiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPhlegmaIiiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PhlegmaIiiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PhlegmaIiiPvE => _PhlegmaIiiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianDosisIiiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24314, false);
        var setting = action.Setting;
        ModifyEukrasianDosisIiiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianDosisIiiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianDosisIiiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianDosisIiiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianDosisIiiPvE => _EukrasianDosisIiiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DyskrasiaIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24315, false);
        var setting = action.Setting;
        ModifyDyskrasiaIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DyskrasiaIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDyskrasiaIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DyskrasiaIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DyskrasiaIiPvE => _DyskrasiaIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ToxikonIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24316, false);
        var setting = action.Setting;
        ModifyToxikonIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ToxikonIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyToxikonIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ToxikonIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction ToxikonIiPvE => _ToxikonIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _KrasisPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24317, false);
        var setting = action.Setting;
        ModifyKrasisPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="KrasisPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyKrasisPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.KrasisPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction KrasisPvE => _KrasisPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PneumaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24318, false);
        var setting = action.Setting;
        ModifyPneumaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PneumaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPneumaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PneumaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PneumaPvE => _PneumaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DosisIiiPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29256, false);
        var setting = action.Setting;
        ModifyDosisIiiPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DosisIiiPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyDosisIiiPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DosisIiiPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction DosisIiiPvP => _DosisIiiPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianDosisIiiPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29257, false);
        var setting = action.Setting;
        ModifyEukrasianDosisIiiPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianDosisIiiPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianDosisIiiPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianDosisIiiPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianDosisIiiPvP => _EukrasianDosisIiiPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasiaPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29258, false);
        var setting = action.Setting;
        ModifyEukrasiaPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasiaPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasiaPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasiaPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasiaPvP => _EukrasiaPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PhlegmaIiiPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29259, false);
        var setting = action.Setting;
        ModifyPhlegmaIiiPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PhlegmaIiiPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPhlegmaIiiPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PhlegmaIiiPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PhlegmaIiiPvP => _PhlegmaIiiPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PneumaPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29260, false);
        var setting = action.Setting;
        ModifyPneumaPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PneumaPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPneumaPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PneumaPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PneumaPvP => _PneumaPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _IcarusPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29261, false);
        var setting = action.Setting;
        ModifyIcarusPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="IcarusPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyIcarusPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.IcarusPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction IcarusPvP => _IcarusPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ToxikonPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29262, false);
        var setting = action.Setting;
        ModifyToxikonPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ToxikonPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyToxikonPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ToxikonPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction ToxikonPvP => _ToxikonPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ToxikonIiPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29263, false);
        var setting = action.Setting;
        ModifyToxikonIiPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ToxikonIiPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyToxikonIiPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ToxikonIiPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction ToxikonIiPvP => _ToxikonIiPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _KardiaPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29264, false);
        var setting = action.Setting;
        ModifyKardiaPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="KardiaPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyKardiaPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.KardiaPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction KardiaPvP => _KardiaPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _MesotesPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29266, false);
        var setting = action.Setting;
        ModifyMesotesPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="MesotesPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyMesotesPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.MesotesPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction MesotesPvP => _MesotesPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _MesotesPvP_29267Creator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29267, false);
        var setting = action.Setting;
        ModifyMesotesPvP_29267(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="MesotesPvP_29267"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyMesotesPvP_29267(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.MesotesPvP_29267"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction MesotesPvP_29267 => _MesotesPvP_29267Creator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianDyskrasiaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)37032, false);
        var setting = action.Setting;
        ModifyEukrasianDyskrasiaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianDyskrasiaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianDyskrasiaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianDyskrasiaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianDyskrasiaPvE => _EukrasianDyskrasiaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PsychePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)37033, false);
        var setting = action.Setting;
        ModifyPsychePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PsychePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPsychePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PsychePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PsychePvE => _PsychePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EukrasianPrognosisIiPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)37034, false);
        var setting = action.Setting;
        ModifyEukrasianPrognosisIiPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EukrasianPrognosisIiPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyEukrasianPrognosisIiPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EukrasianPrognosisIiPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction EukrasianPrognosisIiPvE => _EukrasianPrognosisIiPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PhilosophiaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)37035, false);
        var setting = action.Setting;
        ModifyPhilosophiaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PhilosophiaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyPhilosophiaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PhilosophiaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    public global::RotationSolver.Basic.Actions.IBaseAction PhilosophiaPvE => _PhilosophiaPvECreator.Value;
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50368"><strong>Maim and Mend</strong></see> (SGE) [368]
/// <para>Increases base action damage and HP restoration by 10%.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MaimAndMendTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(368U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50369"><strong>Maim and Mend II</strong></see> (SGE) [369]
/// <para>Increases base action damage and HP restoration by 30%.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MaimAndMendIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(369U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50370"><strong>Addersgall</strong></see> (SGE) [370]
/// <para>Grants 1 stack of Addersgall automatically every twenty seconds.</para>
/// <para>Maximum Stacks: 3</para>
/// <para>Can be charged outside of combat.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait AddersgallTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(370U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50371"><strong>Somanoutic Oath</strong></see> (SGE) [371]
/// <para>Increases the potency of Dosis to 250, Phlegma to 330, and Eukrasian Dosis to 35.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait SomanouticOathTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(371U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50372"><strong>Somanoutic Oath II</strong></see> (SGE) [372]
/// <para>Increases the potency of Dosis to 300, Phlegma to 400, and Eukrasian Dosis to 40.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait SomanouticOathIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(372U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50373"><strong>Addersting</strong></see> (SGE) [373]
/// <para>Grants 1 stack of Addersting when the barrier granted by Eukrasian Diagnosis to any party member or the barrier granted by Eukrasian Prognosis to self is completely absorbed.</para>
/// <para>Maximum Stacks: 3</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait AdderstingTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(373U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50374"><strong>Offensive Magic Mastery</strong></see> (SGE) [374]
/// <para>Upgrades Dosis to Dosis II, Phlegma to Phlegma II, and Eukrasian Dosis to Eukrasian Dosis II. Also increases the potency of Toxikon to 300.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait OffensiveMagicMasteryTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(374U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50375"><strong>Enhanced Kerachole</strong></see> (SGE) [375]
/// <para>Adds an additional effect to Kerachole that grants healing over time.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedKeracholeTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(375U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50376"><strong>Offensive Magic Mastery II</strong></see> (SGE) [376]
/// <para>Upgrades Dosis II to Dosis III, Phlegma II to Phlegma III, Eukrasian Dosis II to Eukrasian Dosis III, Dyskrasia to Dyskrasia II, and Toxikon to Toxikon II.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait OffensiveMagicMasteryIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(376U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50377"><strong>Enhanced Healing Magic</strong></see> (SGE) [377]
/// <para>Increases the healing potency of Diagnosis to 450 and Kardia to 170. Also increases the strength of barriers granted by Eukrasian Diagnosis to 180% the amount of HP restored, and Eukrasian Prognosis to 320% the amount of HP restored.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedHealingMagicTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(377U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50378"><strong>Enhanced Zoe</strong></see> (SGE) [378]
/// <para>Reduces Zoe recast time to 90 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedZoeTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(378U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50510"><strong>Physis Mastery</strong></see> (SGE) [510]
/// <para>Upgrades Physis to Physis II.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait PhysisMasteryTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(510U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50636"><strong>Enhanced Soteria</strong></see> (SGE) [636]
/// <para>Reduces Soteria recast time to 60 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedSoteriaTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(636U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50637"><strong>Eukrasian Prognosis Mastery</strong></see> (SGE) [637]
/// <para>Upgrades Eukrasian Prognosis to Eukrasian Prognosis II.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EukrasianPrognosisMasteryTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(637U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50638"><strong>Enhanced Physis II</strong></see> (SGE) [638]
/// <para>Extends the duration of the effect increasing HP recovered by healing actions to 15 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPhysisIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(638U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50644"><strong>Enhanced Swiftcast</strong></see> (CNJ THM WHM BLM ACN SMN SCH AST RDM SGE PCT) [644]
/// <para>Reduces Swiftcast recast time to 40 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedSwiftcastTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(644U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50669"><strong>Magick Mastery</strong></see> (SGE) [669]
/// <para>Increases the potency of Dosis III to 360, Toxikon II to 360, and Pneuma to 360. </para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MagickMasteryTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(669U);

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private global::RotationSolver.Basic.Traits.IBaseTrait[]? _AllTraits = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Traits.IBaseTrait[] AllTraits => _AllTraits ??= [MaimAndMendTrait, MaimAndMendIiTrait, AddersgallTrait, SomanouticOathTrait, SomanouticOathIiTrait, AdderstingTrait, OffensiveMagicMasteryTrait, EnhancedKeracholeTrait, OffensiveMagicMasteryIiTrait, EnhancedHealingMagicTrait, EnhancedZoeTrait, PhysisMasteryTrait, EnhancedSoteriaTrait, EukrasianPrognosisMasteryTrait, EnhancedPhysisIiTrait, EnhancedSwiftcastTrait, MagickMasteryTrait, ..base.AllTraits];

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    static global::Dalamud.Game.ClientState.JobGauge.Types.SGEGauge JobGauge => global::ECommons.DalamudServices.Svc.Gauges.Get<global::Dalamud.Game.ClientState.JobGauge.Types.SGEGauge>();

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    public static float AddersgallTimer => JobGauge.AddersgallTimer / 1000f - DataCenter.WeaponRemain;

    /// <inheritdoc cref="SGEGauge.Addersgall"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    public static System.Byte Addersgall => JobGauge.Addersgall;

    /// <inheritdoc cref="SGEGauge.Addersting"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    public static System.Byte Addersting => JobGauge.Addersting;

    /// <inheritdoc cref="SGEGauge.Eukrasia"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    public static System.Boolean Eukrasia => JobGauge.Eukrasia;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HealingWindPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)206, false);
        var setting = action.Setting;
        ModifyHealingWindPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HealingWindPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyHealingWindPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HealingWindPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private global::RotationSolver.Basic.Actions.IBaseAction HealingWindPvE => _HealingWindPvECreator.Value;

    /// <inheritdoc cref="HealingWindPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak1 => HealingWindPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BreathOfTheEarthPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)207, false);
        var setting = action.Setting;
        ModifyBreathOfTheEarthPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BreathOfTheEarthPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyBreathOfTheEarthPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BreathOfTheEarthPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private global::RotationSolver.Basic.Actions.IBaseAction BreathOfTheEarthPvE => _BreathOfTheEarthPvECreator.Value;

    /// <inheritdoc cref="BreathOfTheEarthPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak2 => BreathOfTheEarthPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TechneMakrePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24859, false);
        var setting = action.Setting;
        ModifyTechneMakrePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TechneMakrePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifyTechneMakrePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TechneMakrePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private global::RotationSolver.Basic.Actions.IBaseAction TechneMakrePvE => _TechneMakrePvECreator.Value;

    /// <inheritdoc cref="TechneMakrePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak3 => TechneMakrePvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private global::RotationSolver.Basic.Actions.IBaseAction[]? _AllBaseActions = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Actions.IBaseAction[] AllBaseActions => _AllBaseActions ??= [DosisPvE, DiagnosisPvE, KardiaPvE, PrognosisPvE, EgeiroPvE, PhysisPvE, PhlegmaPvE, EukrasiaPvE, EukrasianDiagnosisPvE, EukrasianPrognosisPvE, EukrasianDosisPvE, SoteriaPvE, IcarusPvE, DruocholePvE, DyskrasiaPvE, KeracholePvE, IxocholePvE, ZoePvE, PepsisPvE, PhysisIiPvE, TaurocholePvE, ToxikonPvE, HaimaPvE, DosisIiPvE, PhlegmaIiPvE, EukrasianDosisIiPvE, RhizomataPvE, HolosPvE, PanhaimaPvE, DosisIiiPvE, PhlegmaIiiPvE, EukrasianDosisIiiPvE, DyskrasiaIiPvE, ToxikonIiPvE, KrasisPvE, PneumaPvE, DosisIiiPvP, EukrasianDosisIiiPvP, EukrasiaPvP, PhlegmaIiiPvP, PneumaPvP, IcarusPvP, ToxikonPvP, ToxikonIiPvP, KardiaPvP, MesotesPvP, EukrasianDyskrasiaPvE, PsychePvE, EukrasianPrognosisIiPvE, PhilosophiaPvE, LimitBreak1, LimitBreak2, LimitBreak3, ..base.AllBaseActions];
}