// <auto-generated/>
#pragma warning disable
#nullable enable
namespace RotationSolver.Basic.Rotations.Basic;
[global::RotationSolver.Basic.Attributes.Jobs(global::ECommons.ExcelServices.Job.RPR)]
/// <summary>
/// <see href="https://na.finalfantasyxiv.com/jobguide/reaper"><strong>Reaper</strong></see>
/// <br>Number of Actions: 55</br>
/// <br>Number of Traits: 16</br>
/// </summary>
public abstract partial class ReaperRotation : global::RotationSolver.Basic.Rotations.CustomRotation
{
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SlicePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24373, false);
        var setting = action.Setting;
        ModifySlicePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SlicePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySlicePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SlicePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SlicePvE => _SlicePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WaxingSlicePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24374, false);
        var setting = action.Setting;
        ModifyWaxingSlicePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WaxingSlicePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWaxingSlicePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WaxingSlicePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WaxingSlicePvE => _WaxingSlicePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _InfernalSlicePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24375, false);
        var setting = action.Setting;
        ModifyInfernalSlicePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="InfernalSlicePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyInfernalSlicePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.InfernalSlicePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction InfernalSlicePvE => _InfernalSlicePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SpinningScythePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24376, false);
        var setting = action.Setting;
        ModifySpinningScythePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SpinningScythePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySpinningScythePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SpinningScythePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SpinningScythePvE => _SpinningScythePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _NightmareScythePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24377, false);
        var setting = action.Setting;
        ModifyNightmareScythePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="NightmareScythePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyNightmareScythePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.NightmareScythePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction NightmareScythePvE => _NightmareScythePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ShadowOfDeathPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24378, false);
        var setting = action.Setting;
        ModifyShadowOfDeathPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ShadowOfDeathPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyShadowOfDeathPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ShadowOfDeathPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ShadowOfDeathPvE => _ShadowOfDeathPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WhorlOfDeathPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24379, false);
        var setting = action.Setting;
        ModifyWhorlOfDeathPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WhorlOfDeathPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWhorlOfDeathPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WhorlOfDeathPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WhorlOfDeathPvE => _WhorlOfDeathPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SoulSlicePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24380, false);
        var setting = action.Setting;
        ModifySoulSlicePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SoulSlicePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySoulSlicePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SoulSlicePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SoulSlicePvE => _SoulSlicePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SoulScythePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24381, false);
        var setting = action.Setting;
        ModifySoulScythePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SoulScythePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySoulScythePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SoulScythePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SoulScythePvE => _SoulScythePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GibbetPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24382, false);
        var setting = action.Setting;
        ModifyGibbetPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GibbetPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGibbetPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GibbetPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GibbetPvE => _GibbetPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GallowsPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24383, false);
        var setting = action.Setting;
        ModifyGallowsPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GallowsPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGallowsPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GallowsPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GallowsPvE => _GallowsPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GuillotinePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24384, false);
        var setting = action.Setting;
        ModifyGuillotinePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GuillotinePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGuillotinePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GuillotinePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GuillotinePvE => _GuillotinePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PlentifulHarvestPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24385, false);
        var setting = action.Setting;
        ModifyPlentifulHarvestPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PlentifulHarvestPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPlentifulHarvestPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PlentifulHarvestPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PlentifulHarvestPvE => _PlentifulHarvestPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HarpePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24386, false);
        var setting = action.Setting;
        ModifyHarpePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HarpePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHarpePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HarpePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HarpePvE => _HarpePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SoulsowPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24387, false);
        var setting = action.Setting;
        ModifySoulsowPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SoulsowPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySoulsowPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SoulsowPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SoulsowPvE => _SoulsowPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HarvestMoonPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24388, false);
        var setting = action.Setting;
        ModifyHarvestMoonPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HarvestMoonPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHarvestMoonPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HarvestMoonPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HarvestMoonPvE => _HarvestMoonPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BloodStalkPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24389, false);
        var setting = action.Setting;
        ModifyBloodStalkPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BloodStalkPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBloodStalkPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BloodStalkPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction BloodStalkPvE => _BloodStalkPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _UnveiledGibbetPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24390, false);
        var setting = action.Setting;
        ModifyUnveiledGibbetPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="UnveiledGibbetPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyUnveiledGibbetPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.UnveiledGibbetPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction UnveiledGibbetPvE => _UnveiledGibbetPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _UnveiledGallowsPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24391, false);
        var setting = action.Setting;
        ModifyUnveiledGallowsPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="UnveiledGallowsPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyUnveiledGallowsPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.UnveiledGallowsPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction UnveiledGallowsPvE => _UnveiledGallowsPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GrimSwathePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24392, false);
        var setting = action.Setting;
        ModifyGrimSwathePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GrimSwathePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGrimSwathePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GrimSwathePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GrimSwathePvE => _GrimSwathePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GluttonyPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24393, false);
        var setting = action.Setting;
        ModifyGluttonyPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GluttonyPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGluttonyPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GluttonyPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GluttonyPvE => _GluttonyPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _EnshroudPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24394, false);
        var setting = action.Setting;
        ModifyEnshroudPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="EnshroudPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyEnshroudPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.EnshroudPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction EnshroudPvE => _EnshroudPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _VoidReapingPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24395, false);
        var setting = action.Setting;
        ModifyVoidReapingPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="VoidReapingPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyVoidReapingPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.VoidReapingPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction VoidReapingPvE => _VoidReapingPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CrossReapingPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24396, false);
        var setting = action.Setting;
        ModifyCrossReapingPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CrossReapingPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCrossReapingPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CrossReapingPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CrossReapingPvE => _CrossReapingPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GrimReapingPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24397, false);
        var setting = action.Setting;
        ModifyGrimReapingPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GrimReapingPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGrimReapingPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GrimReapingPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GrimReapingPvE => _GrimReapingPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CommunioPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24398, false);
        var setting = action.Setting;
        ModifyCommunioPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CommunioPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCommunioPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CommunioPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CommunioPvE => _CommunioPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _LemuresSlicePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24399, false);
        var setting = action.Setting;
        ModifyLemuresSlicePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="LemuresSlicePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyLemuresSlicePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.LemuresSlicePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction LemuresSlicePvE => _LemuresSlicePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _LemuresScythePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24400, false);
        var setting = action.Setting;
        ModifyLemuresScythePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="LemuresScythePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyLemuresScythePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.LemuresScythePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction LemuresScythePvE => _LemuresScythePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HellsIngressPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24401, false);
        var setting = action.Setting;
        ModifyHellsIngressPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HellsIngressPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHellsIngressPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HellsIngressPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HellsIngressPvE => _HellsIngressPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HellsEgressPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24402, false);
        var setting = action.Setting;
        ModifyHellsEgressPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HellsEgressPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHellsEgressPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HellsEgressPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HellsEgressPvE => _HellsEgressPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _RegressPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24403, false);
        var setting = action.Setting;
        ModifyRegressPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="RegressPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyRegressPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.RegressPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction RegressPvE => _RegressPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ArcaneCrestPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24404, false);
        var setting = action.Setting;
        ModifyArcaneCrestPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ArcaneCrestPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyArcaneCrestPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ArcaneCrestPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ArcaneCrestPvE => _ArcaneCrestPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ArcaneCirclePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24405, false);
        var setting = action.Setting;
        ModifyArcaneCirclePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ArcaneCirclePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyArcaneCirclePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ArcaneCirclePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ArcaneCirclePvE => _ArcaneCirclePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SlicePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29538, false);
        var setting = action.Setting;
        ModifySlicePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SlicePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySlicePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SlicePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SlicePvP => _SlicePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WaxingSlicePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29539, false);
        var setting = action.Setting;
        ModifyWaxingSlicePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WaxingSlicePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWaxingSlicePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WaxingSlicePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WaxingSlicePvP => _WaxingSlicePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _InfernalSlicePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29540, false);
        var setting = action.Setting;
        ModifyInfernalSlicePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="InfernalSlicePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyInfernalSlicePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.InfernalSlicePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction InfernalSlicePvP => _InfernalSlicePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _VoidReapingPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29543, false);
        var setting = action.Setting;
        ModifyVoidReapingPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="VoidReapingPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyVoidReapingPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.VoidReapingPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction VoidReapingPvP => _VoidReapingPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CrossReapingPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29544, false);
        var setting = action.Setting;
        ModifyCrossReapingPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CrossReapingPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCrossReapingPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CrossReapingPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CrossReapingPvP => _CrossReapingPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HarvestMoonPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29545, false);
        var setting = action.Setting;
        ModifyHarvestMoonPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HarvestMoonPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHarvestMoonPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HarvestMoonPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HarvestMoonPvP => _HarvestMoonPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PlentifulHarvestPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29546, false);
        var setting = action.Setting;
        ModifyPlentifulHarvestPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PlentifulHarvestPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPlentifulHarvestPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PlentifulHarvestPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PlentifulHarvestPvP => _PlentifulHarvestPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GrimSwathePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29547, false);
        var setting = action.Setting;
        ModifyGrimSwathePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GrimSwathePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGrimSwathePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GrimSwathePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GrimSwathePvP => _GrimSwathePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _LemuresSlicePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29548, false);
        var setting = action.Setting;
        ModifyLemuresSlicePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="LemuresSlicePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyLemuresSlicePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.LemuresSlicePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction LemuresSlicePvP => _LemuresSlicePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _DeathWarrantPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29549, false);
        var setting = action.Setting;
        ModifyDeathWarrantPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="DeathWarrantPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyDeathWarrantPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.DeathWarrantPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction DeathWarrantPvP => _DeathWarrantPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HellsIngressPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29550, false);
        var setting = action.Setting;
        ModifyHellsIngressPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HellsIngressPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHellsIngressPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HellsIngressPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HellsIngressPvP => _HellsIngressPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _RegressPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29551, false);
        var setting = action.Setting;
        ModifyRegressPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="RegressPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyRegressPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.RegressPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction RegressPvP => _RegressPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ArcaneCrestPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29552, false);
        var setting = action.Setting;
        ModifyArcaneCrestPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ArcaneCrestPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyArcaneCrestPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ArcaneCrestPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ArcaneCrestPvP => _ArcaneCrestPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TenebraeLemurumPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29553, false);
        var setting = action.Setting;
        ModifyTenebraeLemurumPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TenebraeLemurumPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTenebraeLemurumPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TenebraeLemurumPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TenebraeLemurumPvP => _TenebraeLemurumPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CommunioPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29554, false);
        var setting = action.Setting;
        ModifyCommunioPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CommunioPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCommunioPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CommunioPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CommunioPvP => _CommunioPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SoulSlicePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)29566, false);
        var setting = action.Setting;
        ModifySoulSlicePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SoulSlicePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySoulSlicePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SoulSlicePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SoulSlicePvP => _SoulSlicePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _GuillotinePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)34786, false);
        var setting = action.Setting;
        ModifyGuillotinePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="GuillotinePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyGuillotinePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.GuillotinePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction GuillotinePvP => _GuillotinePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SacrificiumPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)36969, false);
        var setting = action.Setting;
        ModifySacrificiumPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SacrificiumPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySacrificiumPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SacrificiumPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SacrificiumPvE => _SacrificiumPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ExecutionersGibbetPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)36970, false);
        var setting = action.Setting;
        ModifyExecutionersGibbetPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ExecutionersGibbetPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyExecutionersGibbetPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ExecutionersGibbetPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ExecutionersGibbetPvE => _ExecutionersGibbetPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ExecutionersGallowsPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)36971, false);
        var setting = action.Setting;
        ModifyExecutionersGallowsPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ExecutionersGallowsPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyExecutionersGallowsPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ExecutionersGallowsPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ExecutionersGallowsPvE => _ExecutionersGallowsPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ExecutionersGuillotinePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)36972, false);
        var setting = action.Setting;
        ModifyExecutionersGuillotinePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ExecutionersGuillotinePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyExecutionersGuillotinePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ExecutionersGuillotinePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ExecutionersGuillotinePvE => _ExecutionersGuillotinePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PerfectioPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)36973, false);
        var setting = action.Setting;
        ModifyPerfectioPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PerfectioPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPerfectioPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PerfectioPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PerfectioPvE => _PerfectioPvECreator.Value;
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50379"><strong>Soul Gauge</strong></see> (RPR) [379]
/// <para>Allows for Soul Gauge accumulation upon the landing of certain weaponskills and magic actions, or defeating enemies under the effect of Death's Design.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait SoulGaugeTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(379U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50380"><strong>Melee Mastery</strong></see> (RPR) [380]
/// <para>Increases the potency of Slice to 300, Waxing Slice to 140, Shadow of Death to 300, Harpe to 300, Spinning Scythe to 140, Infernal Slice to 140, Whorl of Death to 100, and Nightmare Scythe to 120.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MeleeMasteryTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(380U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50381"><strong>Enhanced Avatar</strong></see> (RPR) [381]
/// <para>Grants the effect of Soul Reaver upon successfully landing Blood Stalk or Grim Swathe.</para>
/// <para>Duration: 30s</para>
/// <para>Effect ends upon execution of any weaponskill or magic attack.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedAvatarTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(381U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50382"><strong>Hellsgate</strong></see> (RPR) [382]
/// <para>Upon executing Hell's Ingress or Hell's Egress, leave behind a Hellsgate and grant Threshold to self.</para>
/// <para>Duration: 10s</para>
/// <para>Hell's Ingress changes to Regress after executing Hell's Egress, and vice versa.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait HellsgateTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(382U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50383"><strong>Tempered Soul</strong></see> (RPR) [383]
/// <para>Allows the accumulation of charges for consecutive uses of Soul Slice and Soul Scythe.</para>
/// <para>Maximum Charges: 2</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait TemperedSoulTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(383U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50384"><strong>Shroud Gauge</strong></see> (RPR) [384]
/// <para>Allows for Shroud Gauge accumulation upon the landing of Gibbet, Gallows, or Guillotine.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait ShroudGaugeTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(384U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50385"><strong>Enhanced Arcane Crest</strong></see> (RPR) [385]
/// <para>Grants Crest of Time Returned to self and nearby party members, gradually restoring HP over time. This effect is only granted when the Crest of Time Borrowed barrier is completely absorbed.</para>
/// <para>Cure Potency: 50</para>
/// <para>Duration: 15s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedArcaneCrestTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(385U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50386"><strong>Void Soul</strong></see> (RPR) [386]
/// <para>Grants Void Shroud upon landing Void Reaping, Cross Reaping, or Grim Reaping.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait VoidSoulTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(386U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50387"><strong>Enhanced Arcane Circle</strong></see> (RPR) [387]
/// <para>Grants Circle of Sacrifice to you and nearby party members upon executing Arcane Circle.</para>
/// <para>Duration: 5s</para>
/// <para>When you or party members under this effect successfully land a weaponskill or cast a spell, you may gain a stack of Immortal Sacrifice, up to a maximum of 8.</para>
/// <para>Duration: 30s</para>
/// <para>Also grants Bloodsown Circle to self, allowing you to receive stacks of Immortal Sacrifice from party members under the effect of your Circle of Sacrifice.</para>
/// <para>Duration: 6s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedArcaneCircleTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(387U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50523"><strong>Melee Mastery II</strong></see> (RPR) [523]
/// <para>Increases the potency of Slice to 320, Waxing Slice to 160, and Infernal Slice to 180.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MeleeMasteryIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(523U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50594"><strong>Enhanced Enshroud</strong></see> (RPR) [594]
/// <para>Grants Oblatio upon executing Enshroud.</para>
/// <para>Duration: 30s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedEnshroudTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(594U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50596"><strong>Enhanced Gluttony</strong></see> (RPR) [596]
/// <para>Grants 2 stacks of Executioner upon executing Gluttony.</para>
/// <para>Duration: 30s</para>
/// <para>Effect cannot be stacked with Soul Reaver.</para>
/// <para>Effect ends upon execution of any weaponskill or magic attack.</para>
/// <para>Gibbet changes to Executioner's Gibbet, Gallows changes to Executioner's Gallows, and Guillotine changes to Executioner's Guillotine while under the effect of Executioner.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedGluttonyTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(596U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50597"><strong>Enhanced Plentiful Harvest</strong></see> (RPR) [597]
/// <para>Grants Perfectio Occulta upon executing Plentiful Harvest.</para>
/// <para>Duration: 30s</para>
/// <para>Perfectio Occulta changes to Perfectio Parata upon executing Communio.</para>
/// <para>Effect of Perfectio Parata ends upon gaining the effect of Lemure Shroud.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPlentifulHarvestTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(597U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50641"><strong>Enhanced Feint</strong></see> (PGL LNC ROG MNK DRG NIN SAM RPR VPR) [641]
/// <para>Extends the duration of Feint to 15 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedFeintTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(641U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50642"><strong>Enhanced Second Wind</strong></see> (PGL LNC ARC ROG MNK DRG BRD NIN MCH SAM DNC RPR VPR) [642]
/// <para>Increases the healing potency of Second Wind to 800.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedSecondWindTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(642U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50657"><strong>Melee Mastery III</strong></see> (RPR) [657]
/// <para>Increases the potency of Slice to 420, Waxing Slice to 260, Spinning Scythe to 160, Infernal Slice to 280, Nightmare Scythe to 140, Gibbet to 500, Gallows to 500, Unveiled Gibbet to 440, Unveiled Gallows to 440, Void Reaping to 500, Cross Reaping to 500, Harvest Moon to 800, and Lemure's Slice to 280.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MeleeMasteryIiiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(657U);

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    private global::RotationSolver.Basic.Traits.IBaseTrait[]? _AllTraits = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Traits.IBaseTrait[] AllTraits => _AllTraits ??= [SoulGaugeTrait, MeleeMasteryTrait, EnhancedAvatarTrait, HellsgateTrait, TemperedSoulTrait, ShroudGaugeTrait, EnhancedArcaneCrestTrait, VoidSoulTrait, EnhancedArcaneCircleTrait, MeleeMasteryIiTrait, EnhancedEnshroudTrait, EnhancedGluttonyTrait, EnhancedPlentifulHarvestTrait, EnhancedFeintTrait, EnhancedSecondWindTrait, MeleeMasteryIiiTrait, ..base.AllTraits];

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    static global::Dalamud.Game.ClientState.JobGauge.Types.RPRGauge JobGauge => global::ECommons.DalamudServices.Svc.Gauges.Get<global::Dalamud.Game.ClientState.JobGauge.Types.RPRGauge>();

    /// <inheritdoc cref="RPRGauge.Soul"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte Soul => JobGauge.Soul;

    /// <inheritdoc cref="RPRGauge.Shroud"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte Shroud => JobGauge.Shroud;

    /// <inheritdoc cref="RPRGauge.EnshroudedTimeRemaining"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static float EnshroudedTimeRemaining => JobGauge.EnshroudedTimeRemaining / 1000f - DataCenter.WeaponRemain;

    /// <inheritdoc cref="RPRGauge.LemureShroud"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte LemureShroud => JobGauge.LemureShroud;

    /// <inheritdoc cref="RPRGauge.VoidShroud"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte VoidShroud => JobGauge.VoidShroud;

    public override /// <inheritdoc/>
    void DisplayStatus()
    {
        ImGui.Text("Soul: " + Soul.ToString());
        ImGui.Text("Shroud: " + Shroud.ToString());
        ImGui.Text("EnshroudedTimeRemaining: " + EnshroudedTimeRemaining.ToString());
        ImGui.Text("LemureShroud: " + LemureShroud.ToString());
        ImGui.Text("VoidShroud: " + VoidShroud.ToString());
        base.DisplayStatus();
    }

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BraverPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)200, false);
        var setting = action.Setting;
        ModifyBraverPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BraverPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBraverPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BraverPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction BraverPvE => _BraverPvECreator.Value;

    /// <inheritdoc cref="BraverPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak1 => BraverPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BladedancePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)201, false);
        var setting = action.Setting;
        ModifyBladedancePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BladedancePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBladedancePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BladedancePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction BladedancePvE => _BladedancePvECreator.Value;

    /// <inheritdoc cref="BladedancePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak2 => BladedancePvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TheEndPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)24858, false);
        var setting = action.Setting;
        ModifyTheEndPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TheEndPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTheEndPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TheEndPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction TheEndPvE => _TheEndPvECreator.Value;

    /// <inheritdoc cref="TheEndPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak3 => TheEndPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction[]? _AllBaseActions = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Actions.IBaseAction[] AllBaseActions => _AllBaseActions ??= [SlicePvE, WaxingSlicePvE, InfernalSlicePvE, SpinningScythePvE, NightmareScythePvE, ShadowOfDeathPvE, WhorlOfDeathPvE, SoulSlicePvE, SoulScythePvE, GibbetPvE, GallowsPvE, GuillotinePvE, PlentifulHarvestPvE, HarpePvE, SoulsowPvE, HarvestMoonPvE, BloodStalkPvE, UnveiledGibbetPvE, UnveiledGallowsPvE, GrimSwathePvE, GluttonyPvE, EnshroudPvE, VoidReapingPvE, CrossReapingPvE, GrimReapingPvE, CommunioPvE, LemuresSlicePvE, LemuresScythePvE, HellsIngressPvE, HellsEgressPvE, RegressPvE, ArcaneCrestPvE, ArcaneCirclePvE, SlicePvP, WaxingSlicePvP, InfernalSlicePvP, VoidReapingPvP, CrossReapingPvP, HarvestMoonPvP, PlentifulHarvestPvP, GrimSwathePvP, LemuresSlicePvP, DeathWarrantPvP, HellsIngressPvP, RegressPvP, ArcaneCrestPvP, TenebraeLemurumPvP, CommunioPvP, SoulSlicePvP, GuillotinePvP, SacrificiumPvE, ExecutionersGibbetPvE, ExecutionersGallowsPvE, ExecutionersGuillotinePvE, PerfectioPvE, LimitBreak1, LimitBreak2, LimitBreak3, ..base.AllBaseActions];
}