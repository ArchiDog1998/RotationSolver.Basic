// <auto-generated/>
#pragma warning disable
#nullable enable
namespace RotationSolver.Basic.Rotations.Basic;
/// <summary>
/// <see href="https://na.finalfantasyxiv.com/jobguide/pictomancer"><strong>Pictomancer</strong></see>
/// <br>Number of Actions: 70</br>
/// <br>Number of Replace Actions: 18</br>
/// <br>Number of Action Combos: 2</br>
/// <br>Number of Traits: 18</br>
/// </summary>
[global::RotationSolver.Basic.Attributes.Jobs(global::ECommons.ExcelServices.Job.PCT)]
public abstract partial class PictomancerRotation : global::RotationSolver.Basic.Rotations.CustomRotation
{
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FireInRedPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FireInRedPvE, false);
        var setting = action.Setting;
        ModifyFireInRedPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FireInRedPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFireInRedPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FireInRedPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FireInRedPvE => _FireInRedPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _AeroInGreenPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.AeroInGreenPvE, false);
        var setting = action.Setting;
        ModifyAeroInGreenPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="AeroInGreenPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyAeroInGreenPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.AeroInGreenPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction AeroInGreenPvE => _AeroInGreenPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WaterInBluePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WaterInBluePvE, false);
        var setting = action.Setting;
        ModifyWaterInBluePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WaterInBluePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWaterInBluePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WaterInBluePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WaterInBluePvE => _WaterInBluePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BlizzardInCyanPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.BlizzardInCyanPvE, false);
        var setting = action.Setting;
        ModifyBlizzardInCyanPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BlizzardInCyanPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBlizzardInCyanPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BlizzardInCyanPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction BlizzardInCyanPvE => _BlizzardInCyanPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StoneInYellowPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StoneInYellowPvE, false);
        var setting = action.Setting;
        ModifyStoneInYellowPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StoneInYellowPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStoneInYellowPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StoneInYellowPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StoneInYellowPvE => _StoneInYellowPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ThunderInMagentaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ThunderInMagentaPvE, false);
        var setting = action.Setting;
        ModifyThunderInMagentaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ThunderInMagentaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyThunderInMagentaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ThunderInMagentaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ThunderInMagentaPvE => _ThunderInMagentaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FireIiInRedPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FireIiInRedPvE, false);
        var setting = action.Setting;
        ModifyFireIiInRedPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FireIiInRedPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFireIiInRedPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FireIiInRedPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FireIiInRedPvE => _FireIiInRedPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _AeroIiInGreenPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.AeroIiInGreenPvE, false);
        var setting = action.Setting;
        ModifyAeroIiInGreenPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="AeroIiInGreenPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyAeroIiInGreenPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.AeroIiInGreenPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction AeroIiInGreenPvE => _AeroIiInGreenPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WaterIiInBluePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WaterIiInBluePvE, false);
        var setting = action.Setting;
        ModifyWaterIiInBluePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WaterIiInBluePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWaterIiInBluePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WaterIiInBluePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WaterIiInBluePvE => _WaterIiInBluePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BlizzardIiInCyanPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.BlizzardIiInCyanPvE, false);
        var setting = action.Setting;
        ModifyBlizzardIiInCyanPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BlizzardIiInCyanPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBlizzardIiInCyanPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BlizzardIiInCyanPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction BlizzardIiInCyanPvE => _BlizzardIiInCyanPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StoneIiInYellowPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StoneIiInYellowPvE, false);
        var setting = action.Setting;
        ModifyStoneIiInYellowPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StoneIiInYellowPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStoneIiInYellowPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StoneIiInYellowPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StoneIiInYellowPvE => _StoneIiInYellowPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ThunderIiInMagentaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ThunderIiInMagentaPvE, false);
        var setting = action.Setting;
        ModifyThunderIiInMagentaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ThunderIiInMagentaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyThunderIiInMagentaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ThunderIiInMagentaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ThunderIiInMagentaPvE => _ThunderIiInMagentaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HolyInWhitePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HolyInWhitePvE, false);
        var setting = action.Setting;
        ModifyHolyInWhitePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HolyInWhitePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHolyInWhitePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HolyInWhitePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HolyInWhitePvE => _HolyInWhitePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CometInBlackPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CometInBlackPvE, false);
        var setting = action.Setting;
        ModifyCometInBlackPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CometInBlackPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCometInBlackPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CometInBlackPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CometInBlackPvE => _CometInBlackPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PomMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.PomMotifPvE, false);
        var setting = action.Setting;
        ModifyPomMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PomMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPomMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PomMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PomMotifPvE => _PomMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WingMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WingMotifPvE, false);
        var setting = action.Setting;
        ModifyWingMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WingMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWingMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WingMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WingMotifPvE => _WingMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ClawMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ClawMotifPvE, false);
        var setting = action.Setting;
        ModifyClawMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ClawMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyClawMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ClawMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ClawMotifPvE => _ClawMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _MawMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.MawMotifPvE, false);
        var setting = action.Setting;
        ModifyMawMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="MawMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyMawMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.MawMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction MawMotifPvE => _MawMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HammerMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HammerMotifPvE, false);
        var setting = action.Setting;
        ModifyHammerMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HammerMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHammerMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HammerMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HammerMotifPvE => _HammerMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StarrySkyMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StarrySkyMotifPvE, false);
        var setting = action.Setting;
        ModifyStarrySkyMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StarrySkyMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStarrySkyMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StarrySkyMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StarrySkyMotifPvE => _StarrySkyMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PomMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.PomMusePvE, false);
        var setting = action.Setting;
        ModifyPomMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PomMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPomMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PomMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PomMusePvE => _PomMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WingedMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WingedMusePvE, false);
        var setting = action.Setting;
        ModifyWingedMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WingedMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWingedMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WingedMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WingedMusePvE => _WingedMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ClawedMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ClawedMusePvE, false);
        var setting = action.Setting;
        ModifyClawedMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ClawedMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyClawedMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ClawedMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ClawedMusePvE => _ClawedMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FangedMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FangedMusePvE, false);
        var setting = action.Setting;
        ModifyFangedMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FangedMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFangedMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FangedMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FangedMusePvE => _FangedMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StrikingMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StrikingMusePvE, false);
        var setting = action.Setting;
        ModifyStrikingMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StrikingMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStrikingMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StrikingMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StrikingMusePvE => _StrikingMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StarryMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StarryMusePvE, false);
        var setting = action.Setting;
        ModifyStarryMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StarryMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStarryMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StarryMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StarryMusePvE => _StarryMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _MogOfTheAgesPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.MogOfTheAgesPvE, false);
        var setting = action.Setting;
        ModifyMogOfTheAgesPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="MogOfTheAgesPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyMogOfTheAgesPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.MogOfTheAgesPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction MogOfTheAgesPvE => _MogOfTheAgesPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _RetributionOfTheMadeenPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.RetributionOfTheMadeenPvE, false);
        var setting = action.Setting;
        ModifyRetributionOfTheMadeenPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="RetributionOfTheMadeenPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyRetributionOfTheMadeenPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.RetributionOfTheMadeenPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction RetributionOfTheMadeenPvE => _RetributionOfTheMadeenPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HammerStampPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HammerStampPvE, false);
        var setting = action.Setting;
        ModifyHammerStampPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HammerStampPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHammerStampPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HammerStampPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HammerStampPvE => _HammerStampPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HammerBrushPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HammerBrushPvE, false);
        var setting = action.Setting;
        ModifyHammerBrushPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HammerBrushPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHammerBrushPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HammerBrushPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HammerBrushPvE => _HammerBrushPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PolishingHammerPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.PolishingHammerPvE, false);
        var setting = action.Setting;
        ModifyPolishingHammerPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PolishingHammerPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPolishingHammerPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PolishingHammerPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PolishingHammerPvE => _PolishingHammerPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StarPrismPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StarPrismPvE, false);
        var setting = action.Setting;
        ModifyStarPrismPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StarPrismPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStarPrismPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StarPrismPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StarPrismPvE => _StarPrismPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SubtractivePalettePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SubtractivePalettePvE, false);
        var setting = action.Setting;
        ModifySubtractivePalettePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SubtractivePalettePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySubtractivePalettePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SubtractivePalettePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SubtractivePalettePvE => _SubtractivePalettePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SmudgePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SmudgePvE, false);
        var setting = action.Setting;
        ModifySmudgePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SmudgePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySmudgePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SmudgePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SmudgePvE => _SmudgePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TemperaCoatPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TemperaCoatPvE, false);
        var setting = action.Setting;
        ModifyTemperaCoatPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TemperaCoatPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTemperaCoatPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TemperaCoatPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TemperaCoatPvE => _TemperaCoatPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TemperaGrassaPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TemperaGrassaPvE, false);
        var setting = action.Setting;
        ModifyTemperaGrassaPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TemperaGrassaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTemperaGrassaPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TemperaGrassaPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TemperaGrassaPvE => _TemperaGrassaPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _RainbowDripPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.RainbowDripPvE, false);
        var setting = action.Setting;
        ModifyRainbowDripPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="RainbowDripPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyRainbowDripPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.RainbowDripPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction RainbowDripPvE => _RainbowDripPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CreatureMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CreatureMotifPvE, false);
        var setting = action.Setting;
        ModifyCreatureMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CreatureMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCreatureMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CreatureMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CreatureMotifPvE => _CreatureMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WeaponMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WeaponMotifPvE, false);
        var setting = action.Setting;
        ModifyWeaponMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WeaponMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWeaponMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WeaponMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WeaponMotifPvE => _WeaponMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _LandscapeMotifPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.LandscapeMotifPvE, false);
        var setting = action.Setting;
        ModifyLandscapeMotifPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="LandscapeMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyLandscapeMotifPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.LandscapeMotifPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction LandscapeMotifPvE => _LandscapeMotifPvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _LivingMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.LivingMusePvE, false);
        var setting = action.Setting;
        ModifyLivingMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="LivingMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyLivingMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.LivingMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction LivingMusePvE => _LivingMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SteelMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SteelMusePvE, false);
        var setting = action.Setting;
        ModifySteelMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SteelMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySteelMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SteelMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SteelMusePvE => _SteelMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ScenicMusePvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ScenicMusePvE, false);
        var setting = action.Setting;
        ModifyScenicMusePvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ScenicMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyScenicMusePvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ScenicMusePvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ScenicMusePvE => _ScenicMusePvECreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FireInRedPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FireInRedPvP, false);
        var setting = action.Setting;
        ModifyFireInRedPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FireInRedPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFireInRedPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FireInRedPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FireInRedPvP => _FireInRedPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _AeroInGreenPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.AeroInGreenPvP, false);
        var setting = action.Setting;
        ModifyAeroInGreenPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="AeroInGreenPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyAeroInGreenPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.AeroInGreenPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction AeroInGreenPvP => _AeroInGreenPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WaterInBluePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WaterInBluePvP, false);
        var setting = action.Setting;
        ModifyWaterInBluePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WaterInBluePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWaterInBluePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WaterInBluePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WaterInBluePvP => _WaterInBluePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _BlizzardInCyanPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.BlizzardInCyanPvP, false);
        var setting = action.Setting;
        ModifyBlizzardInCyanPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="BlizzardInCyanPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyBlizzardInCyanPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.BlizzardInCyanPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction BlizzardInCyanPvP => _BlizzardInCyanPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StoneInYellowPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StoneInYellowPvP, false);
        var setting = action.Setting;
        ModifyStoneInYellowPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StoneInYellowPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStoneInYellowPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StoneInYellowPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StoneInYellowPvP => _StoneInYellowPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ThunderInMagentaPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ThunderInMagentaPvP, false);
        var setting = action.Setting;
        ModifyThunderInMagentaPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ThunderInMagentaPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyThunderInMagentaPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ThunderInMagentaPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ThunderInMagentaPvP => _ThunderInMagentaPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _HolyInWhitePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.HolyInWhitePvP, false);
        var setting = action.Setting;
        ModifyHolyInWhitePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="HolyInWhitePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyHolyInWhitePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.HolyInWhitePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction HolyInWhitePvP => _HolyInWhitePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CometInBlackPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CometInBlackPvP, false);
        var setting = action.Setting;
        ModifyCometInBlackPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CometInBlackPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCometInBlackPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CometInBlackPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CometInBlackPvP => _CometInBlackPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PomMotifPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.PomMotifPvP, false);
        var setting = action.Setting;
        ModifyPomMotifPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PomMotifPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPomMotifPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PomMotifPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PomMotifPvP => _PomMotifPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WingMotifPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WingMotifPvP, false);
        var setting = action.Setting;
        ModifyWingMotifPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WingMotifPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWingMotifPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WingMotifPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WingMotifPvP => _WingMotifPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ClawMotifPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ClawMotifPvP, false);
        var setting = action.Setting;
        ModifyClawMotifPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ClawMotifPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyClawMotifPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ClawMotifPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ClawMotifPvP => _ClawMotifPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _MawMotifPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.MawMotifPvP, false);
        var setting = action.Setting;
        ModifyMawMotifPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="MawMotifPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyMawMotifPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.MawMotifPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction MawMotifPvP => _MawMotifPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _CreatureMotifPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.CreatureMotifPvP, false);
        var setting = action.Setting;
        ModifyCreatureMotifPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="CreatureMotifPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyCreatureMotifPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.CreatureMotifPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction CreatureMotifPvP => _CreatureMotifPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _PomMusePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.PomMusePvP, false);
        var setting = action.Setting;
        ModifyPomMusePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="PomMusePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyPomMusePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.PomMusePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction PomMusePvP => _PomMusePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _WingedMusePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.WingedMusePvP, false);
        var setting = action.Setting;
        ModifyWingedMusePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="WingedMusePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyWingedMusePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.WingedMusePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction WingedMusePvP => _WingedMusePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ClawedMusePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ClawedMusePvP, false);
        var setting = action.Setting;
        ModifyClawedMusePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ClawedMusePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyClawedMusePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ClawedMusePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ClawedMusePvP => _ClawedMusePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _FangedMusePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.FangedMusePvP, false);
        var setting = action.Setting;
        ModifyFangedMusePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="FangedMusePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyFangedMusePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.FangedMusePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction FangedMusePvP => _FangedMusePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _LivingMusePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.LivingMusePvP, false);
        var setting = action.Setting;
        ModifyLivingMusePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="LivingMusePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyLivingMusePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.LivingMusePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction LivingMusePvP => _LivingMusePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SmudgePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SmudgePvP, false);
        var setting = action.Setting;
        ModifySmudgePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SmudgePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySmudgePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SmudgePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SmudgePvP => _SmudgePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TemperaCoatPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TemperaCoatPvP, false);
        var setting = action.Setting;
        ModifyTemperaCoatPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TemperaCoatPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTemperaCoatPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TemperaCoatPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TemperaCoatPvP => _TemperaCoatPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _TemperaGrassaPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.TemperaGrassaPvP, false);
        var setting = action.Setting;
        ModifyTemperaGrassaPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="TemperaGrassaPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyTemperaGrassaPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.TemperaGrassaPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction TemperaGrassaPvP => _TemperaGrassaPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SubtractivePalettePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SubtractivePalettePvP, false);
        var setting = action.Setting;
        ModifySubtractivePalettePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SubtractivePalettePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySubtractivePalettePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SubtractivePalettePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction SubtractivePalettePvP => _SubtractivePalettePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ReleaseSubtractivePalettePvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ReleaseSubtractivePalettePvP, false);
        var setting = action.Setting;
        ModifyReleaseSubtractivePalettePvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ReleaseSubtractivePalettePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyReleaseSubtractivePalettePvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ReleaseSubtractivePalettePvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction ReleaseSubtractivePalettePvP => _ReleaseSubtractivePalettePvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _AdventOfChocobastionPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.AdventOfChocobastionPvP, false);
        var setting = action.Setting;
        ModifyAdventOfChocobastionPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="AdventOfChocobastionPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyAdventOfChocobastionPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.AdventOfChocobastionPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction AdventOfChocobastionPvP => _AdventOfChocobastionPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StarPrismPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StarPrismPvP, false);
        var setting = action.Setting;
        ModifyStarPrismPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StarPrismPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStarPrismPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StarPrismPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction StarPrismPvP => _StarPrismPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _MogOfTheAgesPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.MogOfTheAgesPvP, false);
        var setting = action.Setting;
        ModifyMogOfTheAgesPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="MogOfTheAgesPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyMogOfTheAgesPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.MogOfTheAgesPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction MogOfTheAgesPvP => _MogOfTheAgesPvPCreator.Value;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _RetributionOfTheMadeenPvPCreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.RetributionOfTheMadeenPvP, false);
        var setting = action.Setting;
        ModifyRetributionOfTheMadeenPvP(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="RetributionOfTheMadeenPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyRetributionOfTheMadeenPvP(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.RetributionOfTheMadeenPvP"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseAction RetributionOfTheMadeenPvP => _RetributionOfTheMadeenPvPCreator.Value;
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50537"><strong>Palette Gauge</strong></see> (PCT) [537]
/// <para>Allows for Palette Gauge accumulation upon the landing of Water in Blue and Water II in Blue.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait PaletteGaugeTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(537U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50538"><strong>Enhanced Artistry</strong></see> (PCT) [538]
/// <para>Grants White Paint upon the landing of Water in Blue, Water II in Blue, Thunder in Magenta, and Thunder II in Magenta.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedArtistryTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(538U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50539"><strong>Enhanced Smudge</strong></see> (PCT) [539]
/// <para>Increases movement speed after executing Smudge.</para>
/// <para>Duration: 5s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedSmudgeTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(539U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50540"><strong>Enhanced Pictomancy II</strong></see> (PCT) [540]
/// <para>Hammer Stamp changes to Hammer Brush upon execution, which in turn changes to Polishing Hammer upon execution.</para>
/// <para>Additionally allows the accumulation of charges for consecutive uses of Striking Muse.</para>
/// <para>Maximum Charges: 2</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPictomancyIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(540U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50541"><strong>Enhanced Tempera</strong></see> (PCT) [541]
/// <para>Allows the execution of Tempera Grassa.</para>
/// <para>Can only be executed while under the effect of Tempera Coat. </para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedTemperaTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(541U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50542"><strong>Enhanced Palette</strong></see> (PCT) [542]
/// <para>Grants Monochrome Tones upon executing Subtractive Palette.</para>
/// <para>Monochrome Tones Effect: Converts one stack of White Paint into Black Paint</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPaletteTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(542U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50543"><strong>Enhanced Pictomancy III</strong></see> (PCT) [543]
/// <para>Grants Rainbow Bright upon consuming all stacks of Hyperphantasia. Stacks may be depleted by casting aetherhue spells.</para>
/// <para>Duration: 30s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPictomancyIiiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(543U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50544"><strong>Enhanced Pictomancy V</strong></see> (PCT) [544]
/// <para>Grants Starstruck upon executing Starry Muse.</para>
/// <para>Duration: 20s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPictomancyVTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(544U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50545"><strong>Enhanced Pictomancy IV</strong></see> (PCT) [545]
/// <para>Allows a third charge of Living Muse. In addition, Claw Motif and Maw Motif may now be performed after executing Living Muse.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPictomancyIvTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(545U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50546"><strong>Enhanced Pictomancy</strong></see> (PCT) [546]
/// <para>Grants 5 stacks of Hyperphantasia upon executing Starry Muse.</para>
/// <para>Duration: 30s</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedPictomancyTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(546U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50643"><strong>Enhanced Addle</strong></see> (THM BLM ACN SMN RDM PCT) [643]
/// <para>Extends the duration of Addle to 15 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedAddleTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(643U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50644"><strong>Enhanced Swiftcast</strong></see> (CNJ THM WHM BLM ACN SMN SCH AST RDM SGE PCT) [644]
/// <para>Reduces Swiftcast recast time to 40 seconds.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait EnhancedSwiftcastTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(644U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50670"><strong>Maim and Mend</strong></see> (PCT) [670]
/// <para>Increases base action damage and HP restoration by 10%.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MaimAndMendTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(670U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50671"><strong>Maim and Mend II</strong></see> (PCT) [671]
/// <para>Increases base action damage and HP restoration by 30%.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait MaimAndMendIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(671U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50672"><strong>Pictomancy Mastery</strong></see> (PCT) [672]
/// <para>Increases the potency of Fire in Red to 280, Aero in Green to 320, Water in Blue to 360, Pom Muse to 1,000, Winged Muse to 1,000, Mog of the Ages to 1,100, and Hammer Stamp to 380.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait PictomancyMasteryTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(672U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50676"><strong>Pictomancy Mastery II</strong></see> (PCT) [676]
/// <para>Increases the potency of Fire in Red to 340, Aero in Green to 380, Water in Blue to 420, Fire II in Red to 100, Aero II in Green to 120, Water II in Blue to 140, Hammer Stamp to 480, Blizzard in Cyan to 630, Stone in Yellow to 670, Thunder in Magenta to 710, Blizzard II in Cyan to 220, Stone II in Yellow to 240, and Thunder II in Magenta to 260.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait PictomancyMasteryIiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(676U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50677"><strong>Pictomancy Mastery III</strong></see> (PCT) [677]
/// <para>Increases the potency of Fire in Red to 380, Aero in Green to 420, Water in Blue to 460, Pom Muse to 1,100, Winged Muse to 1,100, Mog of the Ages to 1,300, Hammer Stamp to 520, Blizzard in Cyan to 700, Stone in Yellow to 740, Thunder in Magenta to 780, and Holy in White to 460.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait PictomancyMasteryIiiTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(677U);
    /// <summary>
/// <see href="https://garlandtools.org/db/#action/50678"><strong>Pictomancy Mastery IV</strong></see> (PCT) [678]
/// <para>Increases the potency of Fire in Red to 440, Aero in Green to 480, Water in Blue to 520, Fire II in Red to 120, Aero II in Green to 140, Water II in Blue to 160, Hammer Stamp to 560, Blizzard in Cyan to 800, Stone in Yellow to 840, Thunder in Magenta to 880, Blizzard II in Cyan to 240, Stone II in Yellow to 260, Thunder II in Magenta to 280, Holy in White to 520, Hammer Brush to 620, Polishing Hammer to 680, and Comet in Black to 880.</para>
/// </summary>
    public static global::RotationSolver.Basic.Traits.IBaseTrait PictomancyMasteryIvTrait { get; } = new global::RotationSolver.Basic.Traits.BaseTrait(678U);

    /// <summary>
/// 
/// <seealso cref="FireInRedPvE"/> -> <seealso cref="AeroInGreenPvE"/> -> <seealso cref="WaterInBluePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet FireInRedPvEReplace { get; }

    /// <summary>
/// 
/// <seealso cref="BlizzardInCyanPvE"/> -> <seealso cref="StoneInYellowPvE"/> -> <seealso cref="ThunderInMagentaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet BlizzardInCyanPvEReplace { get; }

    /// <summary>
/// 
/// <seealso cref="FireIiInRedPvE"/> -> <seealso cref="AeroIiInGreenPvE"/> -> <seealso cref="WaterIiInBluePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet FireIiInRedPvEReplace { get; }

    /// <summary>
/// 
/// <seealso cref="BlizzardIiInCyanPvE"/> -> <seealso cref="StoneIiInYellowPvE"/> -> <seealso cref="ThunderIiInMagentaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet BlizzardIiInCyanPvEReplace { get; }

    /// <summary>
/// 
/// <seealso cref="CreatureMotifPvE"/> -> <seealso cref="PomMotifPvE"/> -> <seealso cref="WingMotifPvE"/> -> <seealso cref="ClawMotifPvE"/> -> <seealso cref="MawMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet CreatureMotifPvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="WeaponMotifPvE"/> -> <seealso cref="HammerMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet WeaponMotifPvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="LandscapeMotifPvE"/> -> <seealso cref="StarrySkyMotifPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet LandscapeMotifPvEReplace { get; }

    /// <summary>
/// 
/// <seealso cref="LivingMusePvE"/> -> <seealso cref="PomMusePvE"/> -> <seealso cref="WingedMusePvE"/> -> <seealso cref="ClawedMusePvE"/> -> <seealso cref="FangedMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet LivingMusePvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="SteelMusePvE"/> -> <seealso cref="StrikingMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet SteelMusePvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="ScenicMusePvE"/> -> <seealso cref="StarryMusePvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet ScenicMusePvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="MogOfTheAgesPvE"/> -> <seealso cref="RetributionOfTheMadeenPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet MogOfTheAgesPvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="HammerStampPvE"/> -> <seealso cref="HammerBrushPvE"/> -> <seealso cref="PolishingHammerPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet HammerStampPvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="TemperaCoatPvE"/> -> <seealso cref="TemperaGrassaPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet TemperaCoatPvEReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="HolyInWhitePvP"/> -> <seealso cref="CometInBlackPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet HolyInWhitePvPReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="TemperaCoatPvP"/> -> <seealso cref="TemperaGrassaPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet TemperaCoatPvPReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="SubtractivePalettePvP"/> -> <seealso cref="ReleaseSubtractivePalettePvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet SubtractivePalettePvPReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="AdventOfChocobastionPvP"/> -> <seealso cref="StarPrismPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet AdventOfChocobastionPvPReplace { get; }

    /// <summary>
/// [Replaced] 
/// <seealso cref="MogOfTheAgesPvP"/> -> <seealso cref="RetributionOfTheMadeenPvP"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet MogOfTheAgesPvPReplace { get; }

    /// <summary>
/// <seealso cref="HammerStampPvE"/> -> <seealso cref="HammerBrushPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet HammerBrushPvECombo { get; }

    /// <summary>
/// <seealso cref="HammerStampPvE"/> -> <seealso cref="HammerBrushPvE"/> -> <seealso cref="PolishingHammerPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public global::RotationSolver.Basic.Actions.IBaseActionSet PolishingHammerPvECombo { get; }

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    private global::RotationSolver.Basic.Traits.IBaseTrait[]? _AllTraits = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Traits.IBaseTrait[] AllTraits => _AllTraits ??= [PaletteGaugeTrait, EnhancedArtistryTrait, EnhancedSmudgeTrait, EnhancedPictomancyIiTrait, EnhancedTemperaTrait, EnhancedPaletteTrait, EnhancedPictomancyIiiTrait, EnhancedPictomancyVTrait, EnhancedPictomancyIvTrait, EnhancedPictomancyTrait, EnhancedAddleTrait, EnhancedSwiftcastTrait, MaimAndMendTrait, MaimAndMendIiTrait, PictomancyMasteryTrait, PictomancyMasteryIiTrait, PictomancyMasteryIiiTrait, PictomancyMasteryIvTrait, ..base.AllTraits];

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    static global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge JobGauge => global::ECommons.DalamudServices.Svc.Gauges.Get<global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge>();

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.PalleteGauge"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte PalleteGauge => JobGauge.PalleteGauge;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.Paint"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Byte Paint => JobGauge.Paint;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.CreatureMotifDrawn"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Boolean CreatureMotifDrawn => JobGauge.CreatureMotifDrawn;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.WeaponMotifDrawn"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Boolean WeaponMotifDrawn => JobGauge.WeaponMotifDrawn;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.LandscapeMotifDrawn"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Boolean LandscapeMotifDrawn => JobGauge.LandscapeMotifDrawn;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.MooglePortraitReady"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Boolean MooglePortraitReady => JobGauge.MooglePortraitReady;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.MadeenPortraitReady"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static System.Boolean MadeenPortraitReady => JobGauge.MadeenPortraitReady;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.CreatureFlags"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static Dalamud.Game.ClientState.JobGauge.Enums.CreatureFlags CreatureFlags => JobGauge.CreatureFlags;

    /// <inheritdoc cref="global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge.CanvasFlags"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    public static Dalamud.Game.ClientState.JobGauge.Enums.CanvasFlags CanvasFlags => JobGauge.CanvasFlags;

    public override /// <inheritdoc/>
    void DisplayStatus()
    {
        ImGui.Text("PalleteGauge: " + PalleteGauge.ToString());
        ImGui.Text("Paint: " + Paint.ToString());
        ImGui.Text("CreatureMotifDrawn: " + CreatureMotifDrawn.ToString());
        ImGui.Text("WeaponMotifDrawn: " + WeaponMotifDrawn.ToString());
        ImGui.Text("LandscapeMotifDrawn: " + LandscapeMotifDrawn.ToString());
        ImGui.Text("MooglePortraitReady: " + MooglePortraitReady.ToString());
        ImGui.Text("MadeenPortraitReady: " + MadeenPortraitReady.ToString());
        ImGui.Text("CreatureFlags: " + CreatureFlags.ToString());
        ImGui.Text("CanvasFlags: " + CanvasFlags.ToString());
        base.DisplayStatus();
    }

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SkyshardPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.SkyshardPvE, false);
        var setting = action.Setting;
        ModifySkyshardPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SkyshardPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifySkyshardPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SkyshardPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction SkyshardPvE => _SkyshardPvECreator.Value;

    /// <inheritdoc cref="SkyshardPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak1 => SkyshardPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _StarstormPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.StarstormPvE, false);
        var setting = action.Setting;
        ModifyStarstormPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="StarstormPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyStarstormPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.StarstormPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction StarstormPvE => _StarstormPvECreator.Value;

    /// <inheritdoc cref="StarstormPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak2 => StarstormPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _ChromaticFantasyPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction(global::RotationSolver.Basic.Data.ActionID.ChromaticFantasyPvE, false);
        var setting = action.Setting;
        ModifyChromaticFantasyPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="ChromaticFantasyPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    static partial void ModifyChromaticFantasyPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.ChromaticFantasyPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction ChromaticFantasyPvE => _ChromaticFantasyPvECreator.Value;

    /// <inheritdoc cref="ChromaticFantasyPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak3 => ChromaticFantasyPvE;

    /// <inheritdoc/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.BasicRotationGenerator", "1.0.0.2")]
    protected PictomancerRotation()
    {
        FireInRedPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [WaterInBluePvE, AeroInGreenPvE, FireInRedPvE], false);
        BlizzardInCyanPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [ThunderInMagentaPvE, StoneInYellowPvE, BlizzardInCyanPvE], false);
        FireIiInRedPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [WaterIiInBluePvE, AeroIiInGreenPvE, FireIiInRedPvE], false);
        BlizzardIiInCyanPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [ThunderIiInMagentaPvE, StoneIiInYellowPvE, BlizzardIiInCyanPvE], false);
        CreatureMotifPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [MawMotifPvE, ClawMotifPvE, WingMotifPvE, PomMotifPvE, CreatureMotifPvE], false);
        WeaponMotifPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [HammerMotifPvE, WeaponMotifPvE], true);
        LandscapeMotifPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [StarrySkyMotifPvE, LandscapeMotifPvE], true);
        LivingMusePvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [FangedMusePvE, ClawedMusePvE, WingedMusePvE, PomMusePvE, LivingMusePvE], false);
        SteelMusePvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [StrikingMusePvE, SteelMusePvE], true);
        ScenicMusePvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [StarryMusePvE, ScenicMusePvE], true);
        MogOfTheAgesPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [RetributionOfTheMadeenPvE, MogOfTheAgesPvE], true);
        HammerStampPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [PolishingHammerPvE, HammerBrushPvE, HammerStampPvE], true);
        TemperaCoatPvEReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [TemperaGrassaPvE, TemperaCoatPvE], true);
        HolyInWhitePvPReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [CometInBlackPvP, HolyInWhitePvP], true);
        TemperaCoatPvPReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [TemperaGrassaPvP, TemperaCoatPvP], true);
        SubtractivePalettePvPReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [ReleaseSubtractivePalettePvP, SubtractivePalettePvP], true);
        AdventOfChocobastionPvPReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [StarPrismPvP, AdventOfChocobastionPvP], true);
        MogOfTheAgesPvPReplace = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [RetributionOfTheMadeenPvP, MogOfTheAgesPvP], true);
        HammerBrushPvECombo = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [HammerStampPvEReplace, HammerStampPvEReplace], false);
        PolishingHammerPvECombo = new global::RotationSolver.Basic.Actions.BaseActionSet(() => [HammerStampPvEReplace, HammerStampPvEReplace, HammerStampPvEReplace], false);
    }

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    private global::RotationSolver.Basic.Actions.IBaseAction[]? _AllBaseActions = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.2")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Actions.IBaseAction[] AllBaseActions => _AllBaseActions ??= [FireInRedPvE, AeroInGreenPvE, WaterInBluePvE, BlizzardInCyanPvE, StoneInYellowPvE, ThunderInMagentaPvE, FireIiInRedPvE, AeroIiInGreenPvE, WaterIiInBluePvE, BlizzardIiInCyanPvE, StoneIiInYellowPvE, ThunderIiInMagentaPvE, HolyInWhitePvE, CometInBlackPvE, PomMotifPvE, WingMotifPvE, ClawMotifPvE, MawMotifPvE, HammerMotifPvE, StarrySkyMotifPvE, PomMusePvE, WingedMusePvE, ClawedMusePvE, FangedMusePvE, StrikingMusePvE, StarryMusePvE, MogOfTheAgesPvE, RetributionOfTheMadeenPvE, HammerStampPvE, HammerBrushPvE, PolishingHammerPvE, StarPrismPvE, SubtractivePalettePvE, SmudgePvE, TemperaCoatPvE, TemperaGrassaPvE, RainbowDripPvE, CreatureMotifPvE, WeaponMotifPvE, LandscapeMotifPvE, LivingMusePvE, SteelMusePvE, ScenicMusePvE, FireInRedPvP, AeroInGreenPvP, WaterInBluePvP, BlizzardInCyanPvP, StoneInYellowPvP, ThunderInMagentaPvP, HolyInWhitePvP, CometInBlackPvP, PomMotifPvP, WingMotifPvP, ClawMotifPvP, MawMotifPvP, CreatureMotifPvP, PomMusePvP, WingedMusePvP, ClawedMusePvP, FangedMusePvP, LivingMusePvP, SmudgePvP, TemperaCoatPvP, TemperaGrassaPvP, SubtractivePalettePvP, ReleaseSubtractivePalettePvP, AdventOfChocobastionPvP, StarPrismPvP, MogOfTheAgesPvP, RetributionOfTheMadeenPvP, LimitBreak1, LimitBreak2, LimitBreak3, ..base.AllBaseActions];
}