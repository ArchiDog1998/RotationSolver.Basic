// <auto-generated/>
#pragma warning disable
#nullable enable
namespace RotationSolver.Basic.Rotations.Basic;
[global::RotationSolver.Basic.Attributes.Jobs(global::ECommons.ExcelServices.Job.PCT, global::ECommons.ExcelServices.Job.ACN)]
/// <summary>
/// <see href="https://na.finalfantasyxiv.com/jobguide/pictomancer"><strong>pictomancer</strong></see>
/// <br>Number of Actions: 0</br>
/// <br>Number of Traits: 0</br>
/// </summary>
public abstract partial class PictomancerRotation : global::RotationSolver.Basic.Rotations.CustomRotation
{
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private global::RotationSolver.Basic.Traits.IBaseTrait[]? _AllTraits = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Traits.IBaseTrait[] AllTraits => _AllTraits ??= [..base.AllTraits];

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    static global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge JobGauge => global::ECommons.DalamudServices.Svc.Gauges.Get<global::Dalamud.Game.ClientState.JobGauge.Types.PCTGauge>();

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private readonly global::System.Lazy<global::RotationSolver.Basic.Actions.IBaseAction> _SkyshardPvECreator = new(() =>
    {
        global::RotationSolver.Basic.Actions.IBaseAction action = new global::RotationSolver.Basic.Actions.BaseAction((global::RotationSolver.Basic.Data.ActionID)203, false);
        var setting = action.Setting;
        ModifySkyshardPvE(ref setting);
        action.Setting = setting;
        return action;
    });
    /// <summary>
/// Modify <inheritdoc cref="SkyshardPvE"/>
/// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    static partial void ModifySkyshardPvE(ref global::RotationSolver.Basic.Actions.ActionSetting setting);
    /// <inheritdoc cref="global::RotationSolver.Basic.Data.ActionID.SkyshardPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.SyntaxHelper", "1.0.0.1")]
    private global::RotationSolver.Basic.Actions.IBaseAction SkyshardPvE => _SkyshardPvECreator.Value;

    /// <inheritdoc cref="SkyshardPvE"/>
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private sealed protected override global::RotationSolver.Basic.Actions.IBaseAction LimitBreak3 => SkyshardPvE;

    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    private global::RotationSolver.Basic.Actions.IBaseAction[]? _AllBaseActions = null;
    [global::System.CodeDom.Compiler.GeneratedCode("RotationSolver.GameData.CodeGenerator", "1.0.0.1")]
    /// <inheritdoc/>
    public override global::RotationSolver.Basic.Actions.IBaseAction[] AllBaseActions => _AllBaseActions ??= [LimitBreak3, ..base.AllBaseActions];
}